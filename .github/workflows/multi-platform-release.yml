name: Multi-Platform Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue with other platforms if one fails
      matrix:
        include:
          - platform: Linux
            os: ubuntu-latest
            build_target: linux
            build_path: build/linux/x64/release/bundle
            asset_extension: .tar.gz
            asset_content_type: application/gzip
          - platform: macOS
            os: macos-latest
            build_target: macos
            build_path: build/macos/Build/Products/Release
            asset_extension: .zip
            asset_content_type: application/zip
          - platform: Windows
            os: windows-latest
            build_target: windows
            build_path: build/windows/x64/runner/Release  # Updated path with x64
            asset_extension: .zip
            asset_content_type: application/zip
            
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Extract version from tag
        shell: bash  # Explicitly use bash on all platforms
        run: |
          # Extract version from GitHub release tag (e.g., v1.2.3 -> 1.2.3)
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Building version: ${GITHUB_REF#refs/tags/v}"
        
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          
      - name: Update pubspec version and changelog
        shell: bash
        run: |
          cd dart_rpg
          # Replace version line with new version and build number
          sed -i.bak "s/version: .*/version: ${{ env.VERSION }}+${{ github.run_number }}/" pubspec.yaml
          cat pubspec.yaml | grep "version:"
          
          # Update changelog.json with the new version
          cd ..
          python3 scripts/update_changelog.py ${{ env.VERSION }} || echo "No changes found in memory-bank files"
          
          # Verify the changelog was updated
          cat dart_rpg/assets/data/changelog.json | grep "${{ env.VERSION }}" || echo "Version not found in changelog"
          
      - name: Install dependencies
        shell: bash
        run: |
          cd dart_rpg
          flutter pub get
          
      # Linux-specific setup
      - name: Linux setup
        if: matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          
      # macOS-specific setup
      - name: macOS setup
        if: matrix.platform == 'macOS'
        run: |
          brew update
          brew install create-dmg || true  # Optional for DMG creation
          
      - name: Build for ${{ matrix.platform }}
        shell: bash
        run: |
          cd dart_rpg
          flutter build ${{ matrix.build_target }} --release
          
      # Package the application based on platform
      - name: Package application
        shell: bash
        run: |
          APP_NAME="dart_rpg"
          VERSION="${{ env.VERSION }}"
          ARTIFACT_NAME="${APP_NAME}-${{ matrix.platform }}-${VERSION}${{ matrix.asset_extension }}"
          
          echo "Creating artifact: ${ARTIFACT_NAME}"
          echo "Current directory: $(pwd)"
          
          if [ "${{ matrix.platform }}" == "Linux" ]; then
            cd dart_rpg
            tar -czf "../${ARTIFACT_NAME}" -C ${{ matrix.build_path }} .
            cd ..
          elif [ "${{ matrix.platform }}" == "macOS" ]; then
            # Save the absolute path to the repository root
            REPO_ROOT="$(pwd)"
            echo "Repository root: ${REPO_ROOT}"
            
            # Navigate to the build directory
            cd dart_rpg/${{ matrix.build_path }}
            echo "Build directory: $(pwd)"
            
            # Create the zip file with absolute path
            zip -r "${REPO_ROOT}/${ARTIFACT_NAME}" .
            
            # Return to repository root
            cd "${REPO_ROOT}"
            
            # Verify the file exists and show its details
            echo "Checking for artifact at: ${REPO_ROOT}/${ARTIFACT_NAME}"
            ls -la "${ARTIFACT_NAME}" || { echo "File not found: ${ARTIFACT_NAME}"; exit 1; }
            echo "File size: $(du -h ${ARTIFACT_NAME} | cut -f1)"
          elif [ "${{ matrix.platform }}" == "Windows" ]; then
            # Verify the directory exists before accessing it
            if [ -d "dart_rpg/${{ matrix.build_path }}" ]; then
              # Save the absolute path to the repository root
              REPO_ROOT="$(pwd)"
              echo "Repository root: ${REPO_ROOT}"
              
              cd dart_rpg/${{ matrix.build_path }}
              echo "Build directory: $(pwd)"
              
              # Use a more robust PowerShell command with absolute paths
              powershell -Command "
                Write-Host 'Creating temp directory for packaging...'
                New-Item -ItemType Directory -Path temp_dir -Force
                
                Write-Host 'Copying files to temp directory...'
                Copy-Item -Path * -Destination temp_dir -Recurse -Exclude 'temp_dir'
                
                Write-Host 'Creating zip archive...'
                \$ArtifactPath = Join-Path -Path '${REPO_ROOT}' -ChildPath '${ARTIFACT_NAME}'
                Write-Host 'Artifact will be created at: ' \$ArtifactPath
                
                Compress-Archive -Path temp_dir/* -DestinationPath \$ArtifactPath -Force
                
                Write-Host 'Cleaning up temp directory...'
                Remove-Item -Path temp_dir -Recurse -Force
                
                Write-Host 'Verifying artifact was created...'
                if (Test-Path \$ArtifactPath) {
                    Write-Host 'Artifact created successfully: ' \$ArtifactPath
                    Get-Item \$ArtifactPath | Format-List
                } else {
                    Write-Host 'ERROR: Artifact was not created: ' \$ArtifactPath
                    exit 1
                }
              "
              
              # Return to repository root
              cd "${REPO_ROOT}"
              
              # Additional verification from bash
              echo "Checking for artifact at: ${REPO_ROOT}/${ARTIFACT_NAME}"
              ls -la "${ARTIFACT_NAME}" || { echo "File not found: ${ARTIFACT_NAME}"; exit 1; }
            else
              echo "Error: Directory dart_rpg/${{ matrix.build_path }} does not exist"
              echo "Listing available directories:"
              find dart_rpg/build/windows -type d | sort
              exit 1
            fi
          fi
          
          echo "ARTIFACT_PATH=${ARTIFACT_NAME}" >> $GITHUB_ENV
          
      # Verify artifact exists before uploading
      - name: Verify artifact
        shell: bash
        run: |
          echo "Verifying artifact: ${{ env.ARTIFACT_PATH }}"
          if [ -f "${{ env.ARTIFACT_PATH }}" ]; then
            echo "✅ Artifact exists: ${{ env.ARTIFACT_PATH }}"
            echo "File size: $(du -h ${{ env.ARTIFACT_PATH }} | cut -f1)"
            echo "File details: $(ls -la ${{ env.ARTIFACT_PATH }})"
          else
            echo "❌ Artifact not found: ${{ env.ARTIFACT_PATH }}"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          
      # Use GitHub API directly to upload assets instead of deprecated action
      - name: Generate changelog
        shell: bash
        run: |
          # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Run the changelog generation script to extract the changelog for the release
          CHANGELOG_CONTENT=$(python3 scripts/update_changelog.py $VERSION --extract-only)
          
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ARTIFACT_PATH }}
          body: ${{ env.CHANGELOG_CONTENT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  deploy-to-gh-pages:
    name: Deploy to GitHub Pages
    # Removed dependency on build-and-release so gh-pages deploys even if builds fail
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          
      - name: Update changelog
        shell: bash
        run: |
          # Update changelog.json with the new version
          python3 scripts/update_changelog.py ${GITHUB_REF#refs/tags/v} || echo "No changes found in memory-bank files"
          
          # Verify the changelog was updated
          cat dart_rpg/assets/data/changelog.json | grep "${GITHUB_REF#refs/tags/v}" || echo "Version not found in changelog"
          
      - name: Install dependencies
        shell: bash
        run: |
          cd dart_rpg
          flutter pub get
          
      - name: Build for web
        shell: bash
        run: |
          cd dart_rpg
          flutter build web --release --base-href /DartRPG/
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dart_rpg/build/web
