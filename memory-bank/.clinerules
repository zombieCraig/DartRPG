# Cline Rules for DartRPG Project

## Project Patterns

### Component Organization
- **Break down complex features into specialized components**: When a feature becomes too complex or a file becomes too large, break it down into smaller, specialized components
- **Create dedicated dialog classes**: For complex dialogs that handle significant logic, create a dedicated class (e.g., `MoveDialog`, `OracleDialog`)
- **Group related widgets in subdirectories**: Place related widgets in subdirectories (e.g., `widgets/moves/`, `widgets/journal/`)
- **Extract reusable components**: Identify and extract components that can be reused across the application
- **Create service classes for business logic**: Extract business logic into dedicated service classes (e.g., `AutosaveService`, `OracleService`)
- **Use manager classes for state management**: Create manager classes to handle state for specific features (e.g., `LinkedItemsManager`)

### Naming Conventions
- **Files**: snake_case for file names (e.g., `game_provider.dart`, `logging_service.dart`)
- **Classes**: PascalCase for class names (e.g., `GameProvider`, `LoggingService`)
- **Variables/Methods**: camelCase for variables and methods (e.g., `currentGame`, `saveGame()`)
- **Constants**: SCREAMING_SNAKE_CASE for constants (e.g., `LEVEL_DEBUG`, `LEVEL_INFO`)
- **Private Members**: Prefix with underscore (e.g., `_games`, `_loadGames()`)

### Code Organization
- **Model Classes**: Located in `lib/models/` directory
- **Provider Classes**: Located in `lib/providers/` directory
- **Screen Widgets**: Located in `lib/screens/` directory
- **Utility Classes**: Located in `lib/utils/` directory
- **Reusable Widgets**: Located in `lib/widgets/` directory

### Design Patterns
- **Provider Pattern**: Used for state management throughout the app
- **Singleton Pattern**: Used for services like `LoggingService`
- **Factory Pattern**: Used in model classes for JSON serialization/deserialization
- **Observer Pattern**: Implemented via `ChangeNotifier` and `Consumer` widgets
- **State Pattern**: Used in the Quest model to manage different quest states

### Code Quality Best Practices
- **Run static analysis regularly**: Use `flutter analyze` to catch issues early
- **Fix warnings promptly**: Address warnings as they appear rather than letting them accumulate
- **Document complex logic**: Add comments to explain non-obvious code
- **Write self-documenting code**: Use clear variable and method names
- **Keep methods focused**: Each method should do one thing well
- **Limit method length**: Break down long methods into smaller, focused methods
- **Limit class size**: Extract functionality into new classes when a class grows too large

#### Avoiding Deprecated Functions
- Run `flutter analyze` regularly to catch deprecation warnings early
- Address deprecation warnings as they appear rather than letting them accumulate
- Include deprecation checks in your CI/CD pipeline

##### Color Opacity Management
Instead of using the deprecated `withOpacity()` method:
```dart
// AVOID: Using deprecated withOpacity
color: Colors.blue.withOpacity(0.5)
```

Use `withAlpha()` instead:
```dart
// RECOMMENDED: Using withAlpha
color: Colors.blue.withAlpha(128) // 0.5 opacity = 128 alpha
```

##### Opacity to Alpha Conversion
When converting from opacity to alpha:
- Alpha = Opacity Ã— 255 (rounded to nearest integer)
- Common conversions:
  - 0.1 opacity = 26 alpha
  - 0.2 opacity = 51 alpha
  - 0.3 opacity = 77 alpha
  - 0.4 opacity = 102 alpha
  - 0.5 opacity = 128 alpha
  - 0.6 opacity = 153 alpha
  - 0.7 opacity = 179 alpha
  - 0.8 opacity = 204 alpha
  - 0.9 opacity = 230 alpha

##### For Dynamic Opacity Values
When dealing with animation-based or dynamic opacity:
```dart
// RECOMMENDED: Dynamic alpha calculation
color: Colors.blue.withAlpha(((animationValue * 0.5) * 255).toInt())
```

##### Code Review Checklist for Deprecation
- Check for deprecated method usage
- Verify proper alpha value calculations when setting transparency
- Ensure comments explain the conversion from opacity to alpha values
- Consider creating helper methods for common opacity-to-alpha conversions

### Error Handling
- Use try-catch blocks for operations that might fail
- Log errors using the `LoggingService` with appropriate level and context
- Show user-friendly error messages for user-facing errors
- Include stack traces for debugging purposes

## Implementation Paths

### Adding a New Screen
1. Create a new file in `lib/screens/` directory
2. Implement a StatefulWidget or StatelessWidget as appropriate
3. Use `Consumer` widgets to access provider state
4. Add navigation to the new screen from appropriate places

### Adding a New Model
1. Create a new file in `lib/models/` directory
2. Implement the model class with appropriate properties
3. Add JSON serialization/deserialization methods
4. Update relevant providers to use the new model

### Adding a New Feature
1. Identify which layers need to be modified (UI, state, data)
2. Update or create model classes as needed
3. Update or create provider methods as needed
4. Implement UI components to expose the feature
5. Add appropriate error handling and logging

### GitHub Actions Workflow Best Practices
1. Use modern GitHub Actions syntax and avoid deprecated commands
   - Use environment files (`$GITHUB_ENV`, `$GITHUB_OUTPUT`) instead of `set-output`
   - Use newer action versions that support current GitHub Actions features
2. Add robust error handling and diagnostics
   - Verify paths and files exist before accessing them
   - Add directory listings to help diagnose path issues
   - Include file verification steps after critical operations
3. Use consistent path handling across platforms
   - Be aware of platform-specific path differences (Windows vs. Unix)
   - Use correct build paths for each platform (e.g., `x64` directory for Windows)
4. Document workflow changes and usage
   - Update documentation when workflow files are modified
   - Include troubleshooting information for common issues
5. Test workflows thoroughly
   - Create test releases to verify workflow functionality
   - Check logs for warnings about deprecated features

### Logging Best Practices
1. Always use the custom LoggingService instead of dart:developer or print statements
2. Use appropriate log levels based on message importance (debug, info, warning, error)
3. Include contextual information (tag, method name) to make logs more traceable
4. Log exceptions with stack traces for better debugging
5. Keep log messages clear and informative
6. Avoid logging sensitive information
7. Use the LogViewerScreen for reviewing logs during development and testing

## User Preferences

### UI/UX Preferences
- Clean, minimalist design
- Intuitive navigation with minimal depth
- Consistent visual language across screens
- Dark mode support is important
- Accessibility considerations (font size, contrast)

### Functionality Preferences
- Offline-first approach
- Data persistence and reliability
- Quick access to frequently used features
- Comprehensive error handling
- Performance optimization for mobile devices

## Move Oracle System

### Move Oracle Integration Pattern
- Moves can have embedded oracles that are displayed as a dropdown with a dice button
- The MoveOracle model represents embedded oracles in moves
- The Move model has been enhanced to handle embedded oracles
- The MoveOraclePanel widget displays the dropdown and dice button
- The MoveDetails widget includes the MoveOraclePanel when a move has embedded oracles
- The MoveDialog class handles oracle rolls from moves
- Oracle results are stored in the MoveRoll's moveData property
- Journal entry display has been enhanced to show oracle results
- The LinkedItemsSummary widget displays oracle results in the journal entry summary

## Journal Entry System

### Journal Entry Navigation
- When a journal entry is created from a quest (via completeQuest, forsakeQuest, or makeQuestProgressRoll), it stores metadata indicating it came from the quests screen
- The JournalEntryScreen uses this metadata to conditionally hide the AppBar back button when the entry was created from a quest
- This prevents duplicate back buttons when viewing journal entries created from quests
- Key files involved:
  - `dart_rpg/lib/models/journal_entry.dart`: Contains the JournalEntry class with metadata property
  - `dart_rpg/lib/screens/journal_entry_screen.dart`: Contains the JournalEntryScreen with hideAppBarBackButton parameter
  - `dart_rpg/lib/providers/game_provider.dart`: Contains the quest methods that set metadata
  - `dart_rpg/lib/screens/journal_screen.dart`: Contains the navigation to journal entries that checks metadata

### Journal Entry Editor Architecture
- Modular architecture with specialized components
- JournalEntryEditor as the core component for editing
- EditorToolbar for formatting actions
- AutocompleteSystem for character and location references
- LinkedItemsManager for tracking linked items
- AutosaveService for automatic saving
- JournalEntryViewer for displaying entries
- LinkedItemsSummary for showing linked items

### Rich Text Editor
- Custom implementation with markdown-style formatting
- Toolbar with formatting options (bold, italic, headings, lists)
- Support for character and location references using @ and # syntax
- Image embedding support
- Keyboard shortcuts for common actions (Ctrl+M for Move, Ctrl+O for Oracle, Ctrl+Q for Quests)

### Autocompletion
- Show suggestions after typing @ or # plus one character
- Display inline suggestions as greyed-out text
- Support tab completion for efficiency
- Match on character handle or location name

### Character References
- Use @ syntax with handle-based references
- Automatically generate handle from first name if not provided
- Validate to prevent spaces and special characters in handles
- Format: @handle for characters, #name for locations

### Linked Items Summary
- Collapsible summary below journal entry
- Sections for characters, locations, move rolls, and oracle rolls
- Interactive elements to view details of linked items
- Visual presentation with color coding for move outcomes

## Quest System

### Quest Model
- Implemented in `lib/models/quest.dart`
- Properties include title, rank, progress, status, and notes
- Associated with specific characters
- Status can be Ongoing, Completed, or Forsaken
- Progress tracked on a 10-segment scale

### Quest Screen Organization
- Tab-based UI with three tabs: Ongoing, Completed, Forsaken
- Quests automatically move between tabs based on status changes
- FloatingActionButton for creating new quests
- Card-based UI for displaying quest details

### Quest Progress Tracking
- 10-segment progress bar using ProgressTrackWidget
- Manual adjustment with buttons to increase/decrease progress
- Progress rolls similar to other game mechanics
- Visual feedback on progress changes

### Quest-Journal Integration
- Automatic journal entries for quest status changes
- Quest events recorded in the journal for narrative continuity
- Character association for quest ownership

### Quest Navigation
- Available from bottom navigation bar between Locations and Moves
- Keyboard shortcut (Ctrl+Q) from Journal Entry screen
- Character filtering for focusing on specific character quests

## Known Challenges

### Technical Challenges
- **Data Size**: SharedPreferences has limitations for large datasets
- **Performance**: JSON serialization/deserialization can be CPU-intensive
- **Memory Usage**: In-memory logging can consume significant memory
- **Error Handling**: Balancing comprehensive logging with performance
- **Rich Text Persistence**: Storing and retrieving complex formatted text efficiently
- **Image Handling**: Managing embedded images effectively
- **Quest Filtering**: Performance may degrade with large numbers of quests

### UX Challenges
- **Navigation Complexity**: Many screens and features to navigate
- **Information Density**: Balancing detail with clarity
- **Accessibility**: Supporting various user needs
- **Error Messaging**: Providing helpful error messages without technical jargon
- **Autocompletion UX**: Making suggestions helpful without being intrusive
- **Mobile Text Editing**: Optimizing the rich text editor for touch screens
- **Quest Management**: Balancing quest complexity with usability

## Project Evolution

### Recent Focus
- Restructuring the Journal Entry Editor System into specialized components
- Implementing the Quest system with tabs for different quest statuses
- Enhancing the journal entry system with rich text editing
- Implementing character handle/short name support
- Adding autocompletion for character and location references
- Fixing UI and navigation issues
- Improving search functionality in Moves and Oracles screens

### Current Direction
- Applying the component extraction pattern to other complex features
- Testing and refining the Journal Entry Editor System
- Testing and refining the Quest system features
- Optimizing performance for large numbers of quests
- Improving the quest card visualization
- Optimizing performance for complex journal entries
- Improving the mobile experience for text editing

### Future Considerations
- Moving to a database solution for larger datasets
- Implementing more robust error handling
- Adding quest dependencies and prerequisites
- Implementing quest categories and tags
- Adding more advanced features (multimedia, cloud sync)
- Enhancing the user experience with UI refinements

## Tool Usage Patterns

### Flutter/Dart Tools
- Use `flutter run` for development testing
- Use `flutter build` for release builds
- Use `flutter pub get` to update dependencies
- Use `flutter clean` to resolve build issues

### Version Control
- Use feature branches for new features
- Use descriptive commit messages
- Review code before merging

### Testing
- Manual testing for UI components
- Unit tests for utility functions
- Widget tests for complex UI components

## Documentation Standards

### Code Documentation
- Use Dartdoc comments for classes and public methods
- Document parameters and return values
- Explain complex logic with inline comments
- Keep comments up-to-date with code changes

### User Documentation
- Clear, concise language
- Step-by-step instructions for complex tasks
- Visual aids where appropriate
- Regular updates to reflect new features

## Memory Bank Maintenance

### When to Update
- After implementing significant features
- When changing architectural patterns
- When discovering new project patterns
- When changing project direction

### What to Update
- `activeContext.md` for current focus and recent changes
- `progress.md` for status updates
- `systemPatterns.md` for architectural changes
- Other files as needed based on changes

### How to Update
- Be specific and detailed
- Include rationale for changes
- Update related files for consistency
- Keep a historical perspective
